install.packages("stringr")
library(stringr)
install.packages("recommenderlab")
library(RMySQL)
#smallgroupsmalldata
library(recommenderlab)
#?뜲?씠?꽣?뀑 留뚮뱾湲?
mat<-matrix(nrow=300,ncol=50,byrow=TRUE)
rownames(mat)<-paste("id",1:300,sep="")
colnames(mat)<-paste("tr",1:50,sep="")
#4?젏?삉?뒗 5?젏 二쇨린
list_a<-c(1,2,3,4,5,6,7)
list_b<-c(13,14,15,16,17,18)
list_c<-c(25,26,27,28,29,30)
list_d<-c(37,38,39,40,41,42,43)
for(i in 0:74){
for(j in list_a){
mat[4*i+1,j]=sample(4:5,1,replace=TRUE)
}
for(j in c(45,46,47)){
mat[4*i+1,j]=sample(1:3,1)
}
}
for(i in 0:74){
for(j in list_b){
mat[4*i+2,j]=sample(4:5,1,replace=TRUE)
}
for(j in c(31,32,33)){
mat[4*i+2,j]=sample(1:3,1)
}
}
for(i in 0:74){
for(j in list_c){
mat[4*i+3,j]=sample(4:5,1,replace=TRUE)
}
for(j in c(21,22,25,27)){
mat[4*i+3,j]=sample(1:3,1)
}
}
for(i in 0:75){
for(j in list_d){
mat[4*i,j]=sample(4:5,1,replace=TRUE)
}
for(j in c(9,10,11,12)){
mat[4*i,j]=sample(1:3,1)
}
}
#noise
for(i in 1:300){
random_col<-sample(1:50,8,replace=FALSE)
for(j in random_col){
random_num<-sample(1:5,1)
if(is.na(mat[i,j]))
mat[i,j]<-random_num
else
mat[i,j]<-NA
}
}
#rating matrix
rating<-as(mat,"realRatingMatrix")
rating
identical(as(rating,"matrix"),mat)
#inspection of dataset properties
hist(getRatings(rating),breaks=10)
hist(getRatings(normalize(rating)),breaks=50)
#creating recommender
training<-rating[1:280]
test<-rating[281:300]
model<-Recommender(training,method="POPULAR")
#prediction
#user?뿉寃? 媛?옣 異붿쿇?븷留뚰븳 ?떎?꽢媛? ?긽?뭹
recom<-predict(model,rating[281:282],type="topNList",n=5)
##Recommendations as ?쁳opNList?? with n = 5 for 2 users.
as(recom,"list")
recom3<-bestN(recom,n=3)
as(recom3,"list")
recom3
##Recommendations as ?쁳opNList?? with n = 3 for 2 users.
#user媛 ?긽?뭹?뿉???빐 以? ?젏?닔?삁痢?
recom<-predict(model,test,type="ratings")
##10 x 60 rating matrix of class ?쁱ealRatingMatrix?? with 338 ratings.
#evaluation of top-N recommender algorithm (crossvalitdation)
es<-evaluationScheme(training,method="cross",k=4,given=3,goodRating=4)    #given 3 protocol?
results<-evaluate(es,method="UBCF",type="topNList",n=c(1,3,5,10,15,20))
#getConfusionMatrix(results)
avg(results)
plot(results,annotate=TRUE)
mtx.ev<-as.matrix(avg(results))
f1score<-c()
for(i in 1:4){
f1score[[i]]<-2*(mtx.ev[i,5]*mtx.ev[i,6])/(mtx.ev[i,5]+mtx.ev[i,6])
}
f1score
#accuracy
accuracy<-c()
for(i in 1:4){
accuracy[[i]]<-(mtx.ev[i,1]+mtx.ev[i,4])/(mtx.ev[i,1]+mtx.ev[i,2]+mtx.ev[i,3]+mtx.ev[i,4])
}
accuracy
plot(tannin,growth,pch=21,bg="blue")
plot(tannin,growth,pch=21,bg="blue")
plot(tannin,growth,pch=21,bg="blue")
reg.data<-read.csv('tannin.csv')
reg.data<-read.csv("tannin.csv")
source("https://bioconductor.org/biocLite.R")
biocLite("methylumi")
library(methylumi)
library(help='methylumi')
source("https://bioconductor.org/biocLite.R")
biocLite("minfi")
library(minfi)
ozone.pollution<-read.csv('ozone.data.csv')
first.ga<-read.csv('FirstGA.txt',sep='\t')
first.ga
first.ga<-as.data.frame(first.ga)
plot(first.ga[1])
second.ga<-read.csv('SecondGA.txt',sep='\t')
second.ga<-as.data.frame(second.ga)
plot(range(1,100),first.ga[1])
plot(range(0,100),first.ga[1])
range(0,100)
[0:100]
c[0:100]
seq(0,100)
plot(seq(1,100),first.ga[1])
plot(seq(0,100),first.ga[1])
plot(seq(1,100),first.ga[1])
len(first.ga[1])
length(first.ga[1])
View(first.ga)
first.ga[[1]]
plot(seq(1,100),first.ga[[1]])
first.ga<-read.csv('FirstGA.txt',sep='\t')
second.ga<-read.csv('SecondGA.txt',sep='\t')
first.ga<-as.data.frame(first.ga)
second.ga<-as.data.frame(second.ga)
plot(first.ga[[1]],first.ga[[2]])
a<-plot(first.ga[[1]],first.ga[[2]])
abline(a)
abline()
plot(first.ga[[1]],first.ga[[2]])
abline()
abline(first.ga[[1]],first.ga[[2]])
plot(first.ga[[1]],first.ga[[2]])
lines(first.ga[[1]],first.ga[[2]])
lines(first.ga[[1]],first.ga[[2]],colors="red")
lines(first.ga[[1]],first.ga[[2]],col="red",pch=22,xlab="generation",ylab="avg fitness")
plot(first.ga[[1]],first.ga[[2]],xlab="generation",ylab="avg fitness")
lines(first.ga[[1]],first.ga[[2]],col="red")
lines(first.ga[[1]],first.ga[[2]],col="red",pch=22)
plot(first.ga[[1]],first.ga[[2]],xlab="generation",ylab="avg fitness",pch=21)
plot(first.ga[[1]],first.ga[[2]],xlab="generation",ylab="avg fitness",pch=21,col="red")
lines(first.ga[[1]],first.ga[[2]],col="red",pch=22,lwd=3)
lines(first.ga[[1]],first.ga[[2]],col="red",pch=22,lwd=2.5)
lines(first.ga[[1]],first.ga[[2]],col="red",pch=22,lwd=22)
lines(first.ga[[1]],first.ga[[2]],col="red",pch=22,lwd=2)
plot(first.ga[[1]],first.ga[[2]],xlab="generation",ylab="avg fitness",pch=21,col="red")
lines(first.ga[[1]],first.ga[[2]],col="red",pch=22,lwd=2)
plot(second.ga[[1]],second.ga[[2]],pch=21,col="red",add=TRUE)
matplot(first.ga[[1]],cbine(first.ga[[2]],second.ga[[2]]),xlab="generation",ylab="avg fitness",pch=21,type="l",col=("red","green"),lty=c(1,1))
matplot(first.ga[[1]],cbine(first.ga[[2]],second.ga[[2]]),xlab="generation",ylab="avg fitness",pch=21,type="l",col=c("red","green"),lty=c(1,1))
matplot(first.ga[[1]],cbind(first.ga[[2]],second.ga[[2]]),xlab="generation",ylab="avg fitness",pch=21,type="l",col=c("red","green"),lty=c(1,1))
matplot(first.ga[[1]],cbind(first.ga[[2]],second.ga[[2]]),xlab="generation",ylab="avg fitness",pch=21,type="l",col=c("red","green"),lty=c(2,2))
matplot(first.ga[[1]],cbind(first.ga[[2]],second.ga[[2]]),xlab="generation",ylab="avg fitness",pch=21,type="l",col=c("red","green"),lty=c(1,1),lwd=c(2,2))
legend(90,9000,c("firstGA","secondGA"))
legend(60,9000,c("firstGA","secondGA"))
legend(60,9000,c("firstGA","secondGA"),lty=1,col=c("red","green"))
matplot(first.ga[[1]],cbind(first.ga[[2]],second.ga[[2]]),xlab="generation",ylab="avg fitness",pch=21,type="l",col=c("red","green"),lty=c(1,1),lwd=c(2,2))
legend(70,10500,c("firstGA","secondGA"),lty=1,col=c("red","green"))
matplot(first.ga[[1]],cbind(first.ga[[3]],second.ga[[3]]),xlab="generation",ylab="best fitness",pch=21,type="l",col=c("red","green"),lty=c(1,1),lwd=c(2,2),main="Best Fitness Value")
legend(80,155000,c("firstGA","secondGA"),lty=1,col=c("red","green"))
legend(80,15500,c("firstGA","secondGA"),lty=1,col=c("red","green"))
matplot(first.ga[[1]],cbind(first.ga[[3]],second.ga[[3]]),xlab="generation",ylab="best fitness",pch=21,type="l",col=c("red","green"),lty=c(1,1),lwd=c(2,2),main="Best Fitness Value")
legend(70,15500,c("firstGA","secondGA"),lty=1,col=c("red","green"))
matplot(first.ga[[1]],cbind(first.ga[[3]],second.ga[[3]]),xlab="generation",ylab="best fitness",pch=21,type="l",col=c("red","green"),lty=c(1,1),lwd=c(2,2),main="Best Fitness Value")
legend(70,16000,c("firstGA","secondGA"),lty=1,col=c("red","green"))
matplot(first.ga[[1]],cbind(first.ga[[2]],second.ga[[2]]),xlab="generation",ylab="avg fitness",pch=21,type="l",col=c("red","green"),lty=c(1,1),lwd=c(2,2),main="Average Fitness Value")
legend(70,10500,c("firstGA","secondGA"),lty=1,col=c("red","green"))
matplot(first.ga[[1]],cbind(first.ga[[3]],second.ga[[3]]),xlab="generation",ylab="best fitness",pch=21,type="l",col=c("red","green"),lty=c(1,1),lwd=c(2,2),main="Best Fitness Value")
legend(70,16000,c("firstGA","secondGA"),lty=1,col=c("red","green"))
setwd("Z:/users/heeyeon/수업/1-2/특론2/hw03")
hw.2<-read.csv('hw3.txt',sep='\t')
hw.3<-read.csv('hw3.tst',sep='\t')
hw.3<-read.csv('hw3.txt',sep='\t')
hw.3<-as.data.frame(hw.3)
matplot(hw.3[[1]].cbind(hw.3[[2]],hw.3[[3]].xlab="generation",ylab="fitness",pch=21,type="l",col=c("red","green"),lty=c(1,1),lwd=c(2,2)))
matplot(hw.3[[1]].cbind(hw.3[[2]],hw.3[[3]]),xlab="generation",ylab="fitness",pch=21,type="l",col=c("red","green"),lty=c(1,1),lwd=c(2,2)))
matplot(hw.3[[1]],cbind(hw.3[[2]],hw.3[[3]]),xlab="generation",ylab="fitness",pch=21,type="l",col=c("red","green"),lty=c(1,1),lwd=c(2,2)))
matplot(hw.3[[1]],cbind(hw.3[[2]],hw.3[[3]]),xlab="generation",ylab="fitness",pch=21,type="l",col=c("red","green"),lty=c(1,1),lwd=c(2,2))
legend(85,10000,c("avg fitness","best fitness"),lty=1,col=c("red","green"))
matplot(hw.3[[1]],cbind(hw.3[[2]],hw.3[[3]]),xlab="generation",ylab="fitness",pch=21,type="l",col=c("red","green"),lty=c(1,1),lwd=c(2,2))
legend(80,11000,c("avg fitness","best fitness"),lty=1,col=c("red","green"))
setwd("~/java/hw03")
hw.3<-read.csv('hw3.txt',sep='\t')
matplot(hw.3[[1]],cbind(hw.3[[2]],hw.3[[3]]),xlab="generation",ylab="fitness",pch=21,type="l",col=c("red","green"),lty=c(1,1),lwd=c(2,2))
hw.3<-read.csv('hw3.txt',sep='\t')
hw.3<-as.data.frame(hw.3)
matplot(hw.3[[1]],cbind(hw.3[[2]],hw.3[[3]]),xlab="generation",ylab="fitness",pch=21,type="l",col=c("red","green"),lty=c(1,1),lwd=c(2,2))
setwd("Z:/users/heeyeon/수업/1-2/특론2/hw3")
hw.2<-read.csv('hw3.txt',sep='\t')
hw.2<-as.data.frame(hw.2)
#두개의 그래프 한 plot에 작성하기
matplot(hw.2[[1]],cbind(hw.2[[2]],hw.2[[3]]),xlab="generation",ylab="fitness",pch=21,type="l",col=c("red","green"),lty=c(1,1),lwd=c(2,2))
legend(80,11000,c("avg fitness","best fitness"),lty=1,col=c("red","green"))
legend(80,13000,c("avg fitness","best fitness"),lty=1,col=c("red","green"))
setwd("Z:/users/heeyeon/수업/1-2/특론2/hw3")
hw.2<-read.csv('hw3.txt',sep='\t')
hw.2<-as.data.frame(hw.2)
#두개의 그래프 한 plot에 작성하기
matplot(hw.2[[1]],cbind(hw.2[[2]],hw.2[[3]]),xlab="generation",ylab="fitness",pch=21,type="l",col=c("red","green"),lty=c(1,1),lwd=c(2,2))
legend(80,13500,c("avg fitness","best fitness"),lty=1,col=c("red","green"))
setwd("Z:/users/heeyeon/수업/1-2/특론2/hw3")
hw.2<-read.csv('hw3.txt',sep='\t')
hw.2<-as.data.frame(hw.2)
#두개의 그래프 한 plot에 작성하기
matplot(hw.2[[1]],cbind(hw.2[[2]],hw.2[[3]]),xlab="generation",ylab="fitness",pch=21,type="l",col=c("red","green"),lty=c(1,1),lwd=c(2,2))
legend(80,14000,c("avg fitness","best fitness"),lty=1,col=c("red","green"))
